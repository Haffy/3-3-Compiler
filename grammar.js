/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,5],$V1=[1,4],$V2=[1,5],$V3=[1,10],$V4=[2,9],$V5=[1,14],$V6=[7,9,11,17,21,24,29,30,32,33,34,35,38,60,66,68],$V7=[2,19],$V8=[1,39],$V9=[1,28],$Va=[1,51],$Vb=[1,52],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,53],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,47],$Vk=[1,48],$Vl=[1,50],$Vm=[1,7,9,11,14,17,21,24,25,26,29,30,32,33,34,35,37,38,60,66,68],$Vn=[7,9,11,17,21,24,29,30,32,33,34,35,37,38,60,66,68],$Vo=[9,12,16,19,45],$Vp=[9,12,16,19,44,45,46,48,50,52,53,55,56,57,58,60,61,63,64],$Vq=[2,70],$Vr=[1,74],$Vs=[9,12,16,19,44,45,46],$Vt=[1,77],$Vu=[9,12,16,19,44,45,46,48],$Vv=[1,78],$Vw=[1,79],$Vx=[9,12,16,19,44,45,46,48,50,52],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[9,12,16,19,44,45,46,48,50,52,53,55,56,57],$VD=[1,84],$VE=[1,85],$VF=[9,12,16,19,44,45,46,48,50,52,53,55,56,57,58,60],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,90],$VK=[2,74],$VL=[16,19],$VM=[2,69];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Programa":3,"DeclFuncVar":4,"DeclProg":5,"Tipo":6,"ID":7,"DeclVar":8,";":9,"[":10,"INTCONST":11,"]":12,"DeclFunc":13,"PROGRAMA":14,"Bloco":15,",":16,"(":17,"ListaParametros":18,")":19,"ListaParametrosCont":20,"{":21,"ListaDeclVar":22,"ListaComando":23,"}":24,"INT":25,"CAR":26,"Comando":27,"Expr":28,"RETORNE":29,"LEIA":30,"LValueExpr":31,"ESCREVA":32,"CADEIACARACTERES":33,"NOVALINHA":34,"SE":35,"ENTAO":36,"SENAO":37,"ENQUANTO":38,"EXECUTE":39,"AssignExpr":40,"CondExpr":41,"=":42,"OrExpr":43,"?":44,":":45,"OU":46,"AndExpr":47,"E":48,"EqExpr":49,"==":50,"DesigExpr":51,"!=":52,"<":53,"AddExpr":54,">":55,">=":56,"<=":57,"+":58,"MulExpr":59,"-":60,"*":61,"UnExpr":62,"/":63,"%":64,"PrimExpr":65,"!":66,"ListExpr":67,"CARCONST":68,"$accept":0,"$end":1},
terminals_: {2:"error",7:"ID",9:";",10:"[",11:"INTCONST",12:"]",14:"PROGRAMA",16:",",17:"(",19:")",21:"{",24:"}",25:"INT",26:"CAR",29:"RETORNE",30:"LEIA",32:"ESCREVA",33:"CADEIACARACTERES",34:"NOVALINHA",35:"SE",36:"ENTAO",37:"SENAO",38:"ENQUANTO",39:"EXECUTE",42:"=",44:"?",45:":",46:"OU",48:"E",50:"==",52:"!=",53:"<",55:">",56:">=",57:"<=",58:"+",60:"-",61:"*",63:"/",64:"%",66:"!",68:"CARCONST"},
productions_: [0,[3,2],[4,5],[4,8],[4,4],[4,0],[5,2],[8,3],[8,6],[8,0],[13,4],[18,0],[18,1],[20,2],[20,4],[20,4],[20,6],[15,4],[15,3],[22,0],[22,5],[22,8],[6,1],[6,1],[23,1],[23,2],[27,1],[27,2],[27,3],[27,3],[27,3],[27,3],[27,2],[27,6],[27,8],[27,6],[27,1],[28,1],[40,1],[40,3],[40,6],[41,1],[41,5],[43,3],[43,1],[47,3],[47,1],[49,3],[49,3],[49,1],[51,3],[51,3],[51,3],[51,3],[51,1],[54,3],[54,3],[54,1],[59,3],[59,3],[59,3],[59,1],[62,2],[62,2],[62,1],[31,4],[31,1],[65,4],[65,3],[65,4],[65,1],[65,1],[65,1],[65,3],[65,1],[67,1],[67,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=['programa-node', {},$$[$0-1],$$[$0]]; return this.$ 
break;
case 2:

        id=['id-node', {type:$$[$0-4],name:$$[$0-3]}];
        this.$ = ['declfuncvar-node', {}, $$[$0-4], id, $$[$0-2], $$[$0]];
    
break;
case 3:

        intconst=['intconst-node',{val:$$[$0-4]}];
        vector=['vector-node', {type:$$[$0-7], name:$$[$0-6], size:intconst}];

        this.$ = ['declfuncvar-node', {}, $$[$0-7], vector, $$[$0-2], $$[$0]];
    
break;
case 4:

        id=['id-node', {type:$$[$0-3],name:$$[$0-2]}];
        this.$ = ['declfuncvar-node', {},$$[$0-3], id, $$[$0-1], $$[$0]];
    
break;
case 5:

        this.$ = ['null',{},null] ;
    
break;
case 6:

        this.$ = ['declprog-node',{},$$[$0]];
    
break;
case 7:

        id=['notype-id-node', {name:$$[$0-1]}];
        this.$=['declvar-node',{},id,$$[$0]]
    
break;
case 8:

        intconst=['intconst-node',{val:$$[$0-2]}];
        vector=['notype-vector-node', {name:$$[$0-4], size:intconst}];
        this.$=['declvar-node',{},vector,$$[$0]];
    
break;
case 9: case 11: case 19:

        this.$=['null',{},null];
    
break;
case 10:

        this.$=['declfunc-node',{},$$[$0-2],$$[$0]];
    
break;
case 12: case 36: case 37:

        this.$=$$[$0];
    
break;
case 13:

        id=['notype-id-node', {type:$$[$0-1],name:$$[$0]}]; //###  ALTERE AQUI PARA COMPILAR PARA LINGUAGENS QUE DECLARAM VARIAVEI EM PARAMETROS, id-node
        this.$=['listaparametros-node',{},id];
    
break;
case 14:

        vector=['nosize-vector-node',{type:$$[$0-3], name:$$[$0-2]}];
        this.$=['listaparametros-node',{},vector];
    
break;
case 15:

        id=['notype-id-node', {type:$$[$0-3],name:$$[$0-2]}];
        this.$=['listaparametroscont-node',{},id,$$[$0]];
    
break;
case 16:

        vector=['nosize-vector-node',{type:$$[$0-5], name:$$[$0-4]}];
        this.$=['listaparametroscont-node',{},vector,$$[$0]];
    
break;
case 17:

        this.$=['bloco-listacomando-node',{},$$[$0-2],$$[$0-1]]
    
break;
case 18:

        this.$=['bloco-node',{},$$[$0-1]]
    
break;
case 20:

        id=['id-node', {type:$$[$0-4],name:$$[$0-3]}];
        this.$=['listadeclvar-node',{},id,$$[$0-2],$$[$0]];
    
break;
case 21:

      intconst=['intconst-node',{val:$$[$0-4]}];
      vector=['vector-node', {type:$$[$0-7], name:$$[$0-6], size:intconst}];
      this.$=['listadeclvar-node',{}, vector,$$[$0-2],$$[$0]];
    
break;
case 22: case 23:

      this.$=$$[$0]
    
break;
case 24:

      this.$=['comando-node',{},$$[$0]];
    
break;
case 25:

      this.$=['listacomando-node',{},$$[$0-1],$$[$0]];
    
break;
case 26:

      this.$=['comando-vazio-node'];
    
break;
case 27:

      this.$=['comando-expr-node',{},$$[$0-1]];
    
break;
case 28:

      this.$=['comando-retorne-node',{},$$[$0-1]];
    
break;
case 29:

      this.$=['comando-leia-node',{},$$[$0-1]];
    
break;
case 30:

      expr=['comando-expr-vector-node',{},$$[$0-1]]
      this.$=['comando-escreva-node',{},expr];
    
break;
case 31:

      string=['string-node',{text:$$[$0-1]}]
      this.$=['comando-escreva-node',{},string];
    
break;
case 32:

      this.$=['comando-novalinha-node'];
    
break;
case 33:

      this.$=['comando-seentao-node',{},$$[$0-3],$$[$0]];
    
break;
case 34:

      this.$=['comando-seentaosenao',{},$$[$0-5],$$[$0-2],$$[$0]];
    
break;
case 35:

      this.$=['comando-enquanto-node',{},$$[$0-3],$$[$0]];
    
break;
case 38: case 41: case 44: case 46: case 49: case 54: case 57: case 61: case 64: case 75:

      this.$=$$[$0];
    
break;
case 39:

      id=['notype-id-node', {name:$$[$0-2]}];
      this.$=['assignexpr-node',{},id,$$[$0]];
    
break;
case 40:

      id=['notype-id-node', {name:$$[$0-5]}];
      this.$=['assignexpr-vector-node',{},id,$$[$0-3],$$[$0]];
    
break;
case 42:

      this.$=['comando-seentaosenao',{},$$[$0-4],$$[$0-3],$$[$0]];
    
break;
case 43:

      this.$=['or-node',{},$$[$0-2],$$[$0]];
    
break;
case 45:

      this.$=['and-node',{},$$[$0-2],$$[$0]];
    
break;
case 47:

      this.$=['equals-node',{},$$[$0-2],$$[$0]];
    
break;
case 48:

      this.$=['dif-node',{},$$[$0-2],$$[$0]];
    
break;
case 50:

      this.$=['less-node',{},$$[$0-2],$$[$0]];
    
break;
case 51:

      this.$=['greater-node',{},$$[$0-2],$$[$0]];
    
break;
case 52:

      this.$=['greater-equals-node',{},$$[$0-2],$$[$0]];
    
break;
case 53:

      this.$=['less-equals-node',{},$$[$0-2],$$[$0]];
    
break;
case 55:

      this.$=['plus-node',{},$$[$0-2],$$[$0]];
    
break;
case 56:

      this.$=['minus-node',{},$$[$0-2],$$[$0]];
    
break;
case 58:

      this.$=['multiplication-node',{},$$[$0-2],$$[$0]];
    
break;
case 59:

      this.$=['division-node',{},$$[$0-2],$$[$0]];
    
break;
case 60:

      this.$=['modulus-node',{},$$[$0-2],$$[$0]];
    
break;
case 62:

      this.$=['negation-node',{},$$[$0]];
    
break;
case 63:

      this.$=['no-node',{},$$[$0]];
    
break;
case 65: case 69:

      this.$=['access-vector-node', {name:$$[$0-3], position:$$[$0-1]}];
    
break;
case 66: case 70:

      this.$=['notype-id-node', {name:$$[$0]}];
    
break;
case 67:

      this.$=['function-params-node', {name:$$[$0-3]},$$[$0-1]];
    
break;
case 68:

      this.$=['function-node', {name:$$[$0-2]}];
    
break;
case 71:

      this.$=['carconst-node', {val:$$[$0]}];
    
break;
case 72:

    this.$=['intconst-node', {val:$$[$0]}];
  
break;
case 73:

      this.$=$$[$0-1];
    
break;
case 74:

      this.$=['string-node', {text:$$[$0]}];
    
break;
case 76:

    this.$=['listexpr-node', {},$$[$0-2],$$[$0]];
  
break;
}
},
table: [{3:1,4:2,6:3,14:$V0,25:$V1,26:$V2},{1:[3]},{5:6,14:[1,7]},{7:[1,8]},{7:[2,22]},{7:[2,23]},{1:[2,1]},{15:9,21:$V3},{8:11,9:$V4,10:[1,12],13:13,16:$V5,17:[1,15]},{1:[2,6]},o($V6,$V7,{22:16,6:17,25:$V1,26:$V2}),{9:[1,18]},{11:[1,19]},{4:20,6:3,14:$V0,25:$V1,26:$V2},{7:[1,21]},{6:24,18:22,19:[2,11],20:23,25:$V1,26:$V2},{7:$V8,9:$V9,11:$Va,15:36,17:$Vb,21:$V3,23:25,24:[1,26],27:27,28:29,29:$Vc,30:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,38:$Vi,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:[1,54]},{4:55,6:3,14:$V0,25:$V1,26:$V2},{12:[1,56]},{14:[2,4]},{8:57,9:$V4,10:[1,58],16:$V5},{19:[1,59]},{19:[2,12]},{7:[1,60]},{24:[1,61]},o($Vm,[2,18]),{7:$V8,9:$V9,11:$Va,15:36,17:$Vb,21:$V3,23:62,24:[2,24],27:27,28:29,29:$Vc,30:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,38:$Vi,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},o($Vn,[2,26]),{9:[1,63]},{7:$V8,11:$Va,17:$Vb,28:64,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:[1,66],31:65},{7:$V8,11:$Va,17:$Vb,28:67,33:[1,68],40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{9:[1,69]},{17:[1,70]},{17:[1,71]},o($Vn,[2,36]),o([9,12,19,45],[2,37]),o($Vo,[2,38]),o($Vp,$Vq,{10:[1,73],17:$Vr,42:[1,72]}),o($Vo,[2,41],{44:[1,75],46:[1,76]}),o($Vs,[2,44],{48:$Vt}),o($Vu,[2,46],{50:$Vv,52:$Vw}),o($Vx,[2,49],{53:$Vy,55:$Vz,56:$VA,57:$VB}),o($VC,[2,54],{58:$VD,60:$VE}),o($VF,[2,57],{61:$VG,63:$VH,64:$VI}),o($Vp,[2,61]),{7:$VJ,11:$Va,17:$Vb,33:$Vf,65:89,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,65:91,68:$Vl},o($Vp,[2,64]),o($Vp,[2,71]),o($Vp,[2,72]),{7:$V8,11:$Va,17:$Vb,28:92,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},o($Vp,$VK),{8:93,9:$V4,10:[1,94],16:$V5},{14:[2,2]},{8:95,9:$V4,16:$V5},{9:[2,7]},{11:[1,96]},{15:97,21:$V3},{10:[1,98],16:[1,99],19:[2,13]},o($Vm,[2,17]),{24:[2,25]},o($Vn,[2,27]),{9:[1,100]},{9:[1,101]},{9:[2,66],10:[1,102]},{9:[1,103]},o([44,46,48,50,52,53,55,56,57,58,60,61,63,64],$VK,{9:[1,104]}),o($Vn,[2,32]),{7:$V8,11:$Va,17:$Vb,28:105,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$V8,11:$Va,17:$Vb,28:106,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$V8,11:$Va,17:$Vb,33:$Vf,40:107,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$V8,11:$Va,17:$Vb,28:108,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$V8,11:$Va,17:$Vb,19:[1,110],33:$Vf,40:111,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,67:109,68:$Vl},{7:$V8,11:$Va,17:$Vb,28:112,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,47:113,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,49:114,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,51:115,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,51:116,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,54:117,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,54:118,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,54:119,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,54:120,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,59:121,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,59:122,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,60:$Vj,62:123,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,60:$Vj,62:124,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,60:$Vj,62:125,65:49,66:$Vk,68:$Vl},o($Vp,[2,62]),o($Vp,$Vq,{10:[1,126],17:$Vr}),o($Vp,[2,63]),{19:[1,127]},{9:[1,128]},{11:[1,129]},{9:[1,130]},{12:[1,131]},o([14,25,26],[2,10]),{12:[1,132]},{6:24,20:133,25:$V1,26:$V2},o($Vn,[2,28]),o($Vn,[2,29]),{7:$V8,11:$Va,17:$Vb,28:134,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},o($Vn,[2,30]),o($Vn,[2,31]),{19:[1,135]},{19:[1,136]},o($Vo,[2,39]),{12:[1,137]},{16:[1,139],19:[1,138]},o($Vp,[2,68]),o($VL,[2,75]),{45:[1,140]},o($Vs,[2,43],{48:$Vt}),o($Vu,[2,45],{50:$Vv,52:$Vw}),o($Vx,[2,47],{53:$Vy,55:$Vz,56:$VA,57:$VB}),o($Vx,[2,48],{53:$Vy,55:$Vz,56:$VA,57:$VB}),o($VC,[2,50],{58:$VD,60:$VE}),o($VC,[2,51],{58:$VD,60:$VE}),o($VC,[2,52],{58:$VD,60:$VE}),o($VC,[2,53],{58:$VD,60:$VE}),o($VF,[2,55],{61:$VG,63:$VH,64:$VI}),o($VF,[2,56],{61:$VG,63:$VH,64:$VI}),o($Vp,[2,58]),o($Vp,[2,59]),o($Vp,[2,60]),{7:$V8,11:$Va,17:$Vb,28:141,33:$Vf,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},o($Vp,[2,73]),o($V6,$V7,{6:17,22:142,25:$V1,26:$V2}),{12:[1,143]},{4:144,6:3,14:$V0,25:$V1,26:$V2},{8:145,9:$V4,16:$V5},{16:[1,146],19:[2,14]},{19:[2,15]},{12:[1,147]},{36:[1,148]},{39:[1,149]},o($Vp,$VM,{42:[1,150]}),o($Vp,[2,67]),{7:$V8,11:$Va,17:$Vb,33:$Vf,40:151,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$VJ,11:$Va,17:$Vb,33:$Vf,41:152,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{12:[1,153]},o($V6,[2,20]),{8:154,9:$V4,16:$V5},{14:[2,3]},{9:[2,8]},{6:24,20:155,25:$V1,26:$V2},{9:[2,65]},{7:$V8,9:$V9,11:$Va,15:36,17:$Vb,21:$V3,27:156,28:29,29:$Vc,30:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,38:$Vi,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$V8,9:$V9,11:$Va,15:36,17:$Vb,21:$V3,27:157,28:29,29:$Vc,30:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,38:$Vi,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},{7:$V8,11:$Va,17:$Vb,33:$Vf,40:158,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},o($VL,[2,76]),o($Vo,[2,42]),o($Vp,$VM),{9:[1,159]},{19:[2,16]},o($V6,[2,33],{37:[1,160]}),o($Vn,[2,35]),o($Vo,[2,40]),o($V6,$V7,{6:17,22:161,25:$V1,26:$V2}),{7:$V8,9:$V9,11:$Va,15:36,17:$Vb,21:$V3,27:162,28:29,29:$Vc,30:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,38:$Vi,40:37,41:38,43:40,47:41,49:42,51:43,54:44,59:45,60:$Vj,62:46,65:49,66:$Vk,68:$Vl},o($V6,[2,21]),o($Vn,[2,34])],
defaultActions: {4:[2,22],5:[2,23],6:[2,1],9:[2,6],20:[2,4],23:[2,12],55:[2,2],57:[2,7],62:[2,25],133:[2,15],144:[2,3],145:[2,8],147:[2,65],155:[2,16]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* ignore spaces*/ 
break;
case 1: /* ignore spaces*/ 
break;
case 2:  /* ignore comments */  
break;
case 3:throw new SyntaxError('ERRO: COMENTÁRIO NÃO TERMINA (L'+yy_.yylineno+1+')')
break;
case 4: return 68
break;
case 5:throw new SyntaxError('ERRO: CADEIA DE CARACTERES OCUPA MAIS DE UMA LINHA (L'+yy_.yylineno+1+')')
break;
case 6: return 33
break;
case 7: return 26;
break;
case 8: return 48;
break;
case 9: return 38;
break;
case 10: return 36;
break;
case 11: return 32;
break;
case 12: return 39;
break;
case 13: return 25;
break;
case 14: return 30;
break;
case 15: return 34;
break;
case 16: return 14;
break;
case 17: return 29;
break;
case 18: return 35;
break;
case 19: return 37;
break;
case 20: return 46;
break;
case 21: return 11; 
break;
case 22: return 7; 
break;
case 23: return 56;
break;
case 24: return 57;
break;
case 25: return 50;
break;
case 26: return 52;
break;
case 27: return 53;
break;
case 28: return 55;
break;
case 29: return 42;
break;
case 30: return 9;
break;
case 31: return 16;
break;
case 32: return 45;
break;
case 33: return 17;
break;
case 34: return 19;
break;
case 35: return 10;
break;
case 36: return 12;
break;
case 37: return 21;
break;
case 38: return 24;
break;
case 39: return 58;
break;
case 40: return 60;
break;
case 41: return 61;
break;
case 42: return 63;
break;
case 43: return 64;
break;
case 44: return 44;
break;
case 45: return 66;
break;
case 46: /* ignore break line*/ 
break;
case 47: /* ignore*/ 
break;
case 48: /* ignore*/ 
break;
case 49: /* ignore*/ 
break;
case 50: /* ignore*/ 
break;
case 51:throw new SyntaxError('ERRO: CARACTERE INVÁLIDO (' +yy_.yytext+ ', L' +yy_.yylineno+1+')')
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\*(.|\n)*\*\/)/,/^(?:\/\*.*)/,/^(?:"[a-zA-Z]")/,/^(?:".*\n.*")/,/^(?:"[_a-zA-Z0-9 :]*")/,/^(?:car\b)/,/^(?:e\b)/,/^(?:enquanto\b)/,/^(?:entao\b)/,/^(?:escreva\b)/,/^(?:execute\b)/,/^(?:int\b)/,/^(?:leia\b)/,/^(?:novalinha\b)/,/^(?:programa\b)/,/^(?:retorne\b)/,/^(?:se\b)/,/^(?:senao\b)/,/^(?:ou\b)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][_a-zA-Z0-9]*)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:!)/,/^(?:\n)/,/^(?:\f)/,/^(?:\r)/,/^(?:\t)/,/^(?:$)/,/^(?:.*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}